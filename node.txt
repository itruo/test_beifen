package com.study.algorithm;


import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;

import java.util.*;

/**
 * @author luowenliang
 * @since 2021/12/25 12:43
 */
public class AnNode {

    public static void main(String[] args) {

        // 根节点
        String objId = "A";

        // 存储所有节点
        Map<String, Node> nodeMap = new HashMap<>(128);

        collectNode(null, objId, nodeMap);

        Node rootNode = nodeMap.get(objId);
        if (null == rootNode) {
            // 理论不可能为空
            return;
        }

        rootNode.setSupIds(Collections.<String>emptyList());

        doHierarchy(nodeMap, rootNode.getSubIds(), 0);

        // 遍历节点
        for (Map.Entry<String, Node> entry : nodeMap.entrySet()) {
            // 处理非根节点
            if (!entry.getKey().equals(objId)) {
                Node value = entry.getValue();
                if (value.supIds.size() != value.hierarchy.size()) {
                    // 不相等说明有环，还需要再次遍历(因为我们是一层一层遍历的，如果上一层都遍历完了还不相等，肯定是子节点有指向了父节点)
                    // value.getSubIds(), value.getHierarchy().get(value.getHierarchy().size() - 1)
                    // 获取当前节点的最大层级
                    Integer max = value.getHierarchy().stream().max(Integer::compareTo).orElse(0);
                    // 再次遍历其子节点
                    doHierarchy(nodeMap, value.getSubIds(), max);
                }
            }
        }

        for (Map.Entry<String, Node> entry : nodeMap.entrySet()) {
            Node value = entry.getValue();
            Integer max = value.getHierarchy().stream().max(Integer::compareTo).orElse(0);
            System.out.println("节点：" + value.objId + "最大层级为：" + max);
        }

        System.out.println(1);

    }

    // 此方法执行完 nodeSubIds.size() - 1 就是所有下游节点的总数 nodeSubIds.get(objId).size()就是一级下游总数
    // lastObjId 上一层节点ID 即currentObjId的父节点
    // allIds 已经找过下游的节点
    private static void collectNode(String lastObjId, String currentObjId, Map<String, Node> nodeMap) {

        Node currentNode = nodeMap.get(currentObjId);

        if (null != currentNode) {
            // 已经有了就不再遍历下去了 但是lastObjId是属于currentObjId的上游的需要加上
            currentNode.addSupNodeId(lastObjId);
            return;
        }

        currentNode = new Node(currentObjId);
        currentNode.addSupNodeId(lastObjId);

        // new了就直接放到map里面去 防止递归的时候找不到 解决环会一直循环
        nodeMap.put(currentObjId, currentNode);

        //Map<String, Object> queryParam = new HashMap<>(1);
        //queryParam.put("objId", currentObjId);

        // 查询下游
        List<String> subIds = createdSubNodeIdList(currentObjId);

        List<String> sbIdList = new ArrayList<>(subIds.size());

        for (String subId : subIds) {
            // 继续分析资节点的下游节点
            if (!currentObjId.equals(subId)) { // 相等的说明自己指向自己，无意义去掉
                sbIdList.add(subId);
                collectNode(currentObjId, subId, nodeMap);
            }
        }

        // 设置所有下游节点ID
        currentNode.setSubIds(sbIdList);

        //nodeMap.put(currentObjId, currentNode);

    }


    // idList 当前层需要处理的节点ID  currentHierarchy当前遍历的层级 lastObjId 上一个节点
    private static void doHierarchy(Map<String, Node> nodeMap, List<String> idList, int currentHierarchy) {

        if (idList.isEmpty()) {
            return;
        }

        // 保存下一层需要分析的节点ID
        List<String> nextIdList = new ArrayList<>(32);

        // 处理子节点
        for (String subId : idList) {
            Node subNode = nodeMap.get(subId);
            if (null == subNode) {
                // 理论上是不可能为空的
                continue;
            }

            if (subNode.getHierarchy().size() < subNode.getSupIds().size()) {
                // 小于的才继续遍历 大于等于的说明重复循环过来的
                // 当前链路层级
                subNode.getHierarchy().add(currentHierarchy + 1);

                // 当nextNode的上游节点数量与链路层级的数量相等时说明subNode的所有上游已经遍历完成 下一次就该遍历子节点了
                if (subNode.supNodeSize() == subNode.getHierarchy().size()) {
                    // 把所有子节点加入到下一层分析中
                    nextIdList.addAll(subNode.getSubIds());
                }
            }
        }

        // 分析下一层
        doHierarchy(nodeMap, nextIdList, ++currentHierarchy);
    }

    public static List<String> createdSubNodeIdList(String supId) {
        List<String> list = new ArrayList<>(16);
        if ("A".equals(supId)) {
            list.add("B");
            list.add("C");
        } else if ("B".equals(supId)) {
            list.add("D");
        } else if ("C".equals(supId)) {
            list.add("B");
            list.add("C");
        } else if ("D".equals(supId)) {
            list.add("A");
            list.add("B");
        }
        return list;
    }

    @Getter
    @Setter
    static class Node {

        private String objId;

        private List<String> subIds;

        private List<String> supIds;

        // 存储当前节点每次遍历的层级数
        private List<Integer> hierarchy;

        public Node(String objId) {
            this.objId = objId;
            this.hierarchy = new ArrayList<>(16);
            this.supIds = new ArrayList<>(16);
        }

        public int supNodeSize() {
            return supIds.size();
        }

        public void addSupNodeId(String objId) {
            if (null != objId) {
                supIds.add(objId);
            }
        }
    }
}
